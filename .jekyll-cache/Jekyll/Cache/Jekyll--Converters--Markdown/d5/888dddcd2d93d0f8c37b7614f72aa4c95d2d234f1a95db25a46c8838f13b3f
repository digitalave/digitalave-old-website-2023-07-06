I"–f<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>
<div class="embed-container"><iframe src="https://www.youtube.com/embed/dY_kcdgzzyY?&amp;autoplay=1" frameborder="0" allowfullscreen=""></iframe></div>

<h2 id="how-to-install-and-configure-sonarqube-8-on-ubuntu-1804-lts--debian">How to Install and Configure SonarQube 8 on Ubuntu 18.04 LTS / Debian</h2>

<p><img src="/images/pages/SonarQube-Ubuntu/sonarqube.jpg" width="100%" /></p>

<h3 id="introduction">Introduction:</h3>
<p>SonarQube is an open-source tool which can used for analyze quality of the source code. It can detect your code bugs, vulnerabilities, security black holes and code smells.
SonarQube empowers you to write cleaner and safer codes without breaking standards and code methodologies.</p>

<p>SonarQube is bundled with static code analyzer for more than 27 programming languages.
SonarQube performs continues code inspection using thousands of automated static code analysis rules.</p>

<p>We can perform code analysis manually or integrating with CICD DevOps tools such as Jenkins, Auzre DevOps and Bamboo.</p>

<p>And, also you can integrate SonarQube with your IDE tool such as Visual Studio and Eclips.</p>

<p>SonarQube provides code reliability by preventing bugs and application security by fixing vulnerabilities that compromise your code.</p>

<p>SonarQube is an open-source platform. Which uses for static code analysis and continuous inspection of code quality. SonarQube can detect bugs, code smells and security vulnerabilities.SonarQube empowers developers to write cleaner and safer code.</p>

<p>SonarQube provides code reliability by preventing bugs and application security by fixing vulnerabilities that compromise your code.</p>

<p>SonarQube is able to integrate with CI/CD tools such as Jenkins, Azure DevOps, GitHub, GitLab, Bitbucket and many more.</p>

<h3 id="features">Features:</h3>

<p><strong>Build Integration - Jenkins, Azure DevOps, Bamboo, etc‚Ä¶</strong></p>

<p><strong>IDE Integration - Visual Studio, Eclips, InteliJ, etc‚Ä¶</strong></p>

<p><strong>Other Pipeline Integration</strong></p>

<h3 id="prerequisites">Prerequisites:</h3>

<p><code class="language-plaintext highlighter-rouge">OS - Ubuntu 18.04 / 16.04 LTS / Debian</code></p>

<p><code class="language-plaintext highlighter-rouge">RAM - 4GB Minimum RAM</code></p>

<p><code class="language-plaintext highlighter-rouge">CPU - 1vCPU</code></p>

<p><code class="language-plaintext highlighter-rouge">JAVA - Oracle JRE 11 or OpenJDK 11</code></p>

<p><strong>NOTE:</strong> <em>Please make sure to install compatible Java version before continue the installation.</em></p>

<p>REF: <a href="https://docs.sonarqube.org/latest/requirements/requirements/" target="_blank">https://docs.sonarqube.org/latest/requirements/requirements/</a></p>

<p>In this tutorial, I will going to install SonarQube Community Edition v8.3 on Ubuntu 18.04. Which required OpenJDK 11 packages to be installed on the system.</p>

<p>SonarQube 8.3
OpenJDK 11
PostgreSQL 12</p>

<h3 id="step-01-set-kernel-parameters--system-limits">STEP 01: Set kernel Parameters &amp; System Limits</h3>
<p>First  of all we need to  perform some OS level modifications to ‚ÄúKernel Parameters‚Äù and ‚ÄúSystem limits‚Äù</p>

<p>Append these entries to bottom of the ‚Äúsysctl.conf‚Äù file.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vim /etc/sysctl.conf
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vm.max_map_count<span class="o">=</span>262144
fs.file-max<span class="o">=</span>65536
<span class="nb">ulimit</span> <span class="nt">-n</span> 65536
<span class="nb">ulimit</span> <span class="nt">-u</span> 4096
</code></pre></div></div>

<p>And, also append these entries at the end of the ‚Äúlimits.conf‚Äù file.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vim /etc/security/limits.conf
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sonarqube   -   nofile   65536
sonarqube   -   <span class="nb">nproc    </span>4096
</code></pre></div></div>

<p>Make sure to reboot systems once above changes made. Therefore New changes will reflect after the reboot.</p>

<h3 id="step-02-install-openjdk-11">STEP 02: Install OpenJDK 11</h3>

<p><strong>Download &amp; Install JDK 11 APT Repositories</strong></p>

<p>Now, It‚Äôs time to install Java on your system. Don‚Äôt forget to install compatible Java version with you SonarQube version.</p>

<p>First perform a system update.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update <span class="nt">-y</span>
</code></pre></div></div>

<p>Then, Install OpenJDK 11</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>openjdk-11-jdk <span class="nt">-y</span>
</code></pre></div></div>

<p><strong>Set Default JDK Version</strong></p>

<p>Then, You need to set newly installed  Java version as your default Java version</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>update-alternatives <span class="nt">--config</span> java
</code></pre></div></div>

<p><strong>Verify Install Java Version</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="nt">-version</span>
</code></pre></div></div>

<h3 id="step-02-install--configure-postgresql-database-for-sonarqube">STEP 02: Install &amp; Configure PostgreSQL Database for SonarQube</h3>

<p>In this tutorial I‚Äôm using PostgreSQL as my database engine. You also can use other compatible DB such as MySQL or Oracle.</p>

<p>It‚Äôs always better to check version compatibility matrix, which recommends by SonarQube developers.</p>

<p>REF: <a href="https://docs.sonarqube.org/latest/requirements/requirements/ " target="_blank">https://docs.sonarqube.org/latest/requirements/requirements/
</a></p>

<p>Let‚Äôs do a system update again.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
</code></pre></div></div>

<p><strong>Import Trusted PGP Key and PostgreSQL APT Repo</strong></p>

<p>Then, Install trusted GPG key on your system. And create a repository file for PostgreSQL.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">-q</span> https://www.postgresql.org/media/keys/ACCC4CF8.asc <span class="nt">-O</span> - | <span class="nb">sudo </span>apt-key add -

<span class="nb">sudo </span>sh <span class="nt">-c</span> <span class="s1">'echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" &gt;&gt; /etc/apt/sources.list.d/pgdg.list'</span>
</code></pre></div></div>

<p><strong>Install PostgreSQL</strong></p>

<p>Let‚Äôs install PostgreSQL on your system.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>postgresql postgresql-contrib
</code></pre></div></div>

<p><strong>Check PostgreSQL Version</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo</span> <span class="nt">-u</span> postgres psql <span class="nt">-c</span> <span class="s2">"SELECT version();"</span>
</code></pre></div></div>

<p><strong>Enable  &amp; Start PostgreSQL Service</strong></p>

<p>Enable &amp; start service to be able to start at the system boots up.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl <span class="nb">enable </span>postgresql.service

<span class="nb">sudo </span>systemctl start  postgresql.service
</code></pre></div></div>

<p><strong>Change PostgreSQL default user password</strong></p>

<p>Change default PostgreSQL password and set new password.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>passwd postgres
</code></pre></div></div>

<p><strong>Switch  to PostgreSQL User</strong></p>

<p>Now, Switch into ‚Äúpostgres‚Äù user.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>su - postgres
</code></pre></div></div>

<p><strong>Create New User ‚Äúsonar‚Äù</strong></p>

<p>Create a new database user which named with ‚Äúsonar‚Äù.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>createuser sonar
</code></pre></div></div>

<p><strong>Log Into PostgreSQL Shell</strong></p>

<p>Now, Login to postgresql database shell.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psql
</code></pre></div></div>

<p><strong>Set Password for SonarQube Database User ‚Äúsonar‚Äù</strong></p>

<p>And, Then set a password for the database user ‚Äúsonar‚Äù</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ALTER USER sonar WITH ENCRYPTED PASSWORD <span class="s1">'p@ssw0rd'</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>Create New Database ‚Äúsonarqube‚Äù</strong></p>

<p>Create a new database which  named with ‚Äúsonarqube‚Äù</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CREATE DATABASE sonarqube OWNER sonar<span class="p">;</span>
</code></pre></div></div>

<p><strong>Grant Privileges to ‚Äúsonar‚Äù User on ‚Äúsonarqube‚Äù Database</strong></p>

<p>Now, Grant all privileges to that user and database.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GRANT ALL PRIVILEGES ON DATABASE sonarqube to sonar<span class="p">;</span>
</code></pre></div></div>

<p>Exit From PostgreSQL Shell</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="se">\q</span>
</code></pre></div></div>

<p><strong>Exit From  ‚Äúpostgres‚Äù User</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">exit</span>
</code></pre></div></div>

<p><strong>Restart &amp; Check PostgreSQL DB Service Status again</strong></p>

<p>Enable PostgreSQL service to be able to start automatically at systems boots-up.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart  postgresql
systemctl status <span class="nt">-l</span>   postgresql
</code></pre></div></div>

<p>Now Check wether PostgreSQL is listing on default port ‚Äú5432‚Äù</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>netstat <span class="nt">-tulpena</span> | <span class="nb">grep </span>postgres
</code></pre></div></div>

<h3 id="step-03-download--install-sonarqube">STEP 03: Download &amp; Install SonarQube</h3>

<p>Now, It‚Äôs time to  download SonarQube binary archive file and extract on out installation directory.</p>

<p><strong>Download SonarQube Archive File</strong></p>

<p>REF: <a href="https://binaries.sonarsource.com/Distribution/sonarqube/" target="_blank">https://binaries.sonarsource.com/Distribution/sonarqube/</a></p>

<p>Now, Let‚Äôs create temporary directory and download SonarQube archive file.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo mkdir</span> /sonarqube/

<span class="nb">cd</span> /sonarqube/
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>curl <span class="nt">-O</span> https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-8.3.0.34182.zip
</code></pre></div></div>

<p>Additionally, you may need to  install ‚Äúzip‚Äù apt package if not available your system.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>zip
</code></pre></div></div>

<p>Extract your downloaded archive into /opt/ directory.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>unzip sonarqube-8.3.0.34182.zip <span class="nt">-d</span> /opt/
</code></pre></div></div>

<p>Move Extracted setup into /opt/sonarqube/ directory</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo mv</span> /opt/sonarqube-8.3.0.34182/ /opt/sonarqube
</code></pre></div></div>

<h3 id="step-04-create-group--user-for-sonarqube">STEP 04: Create Group &amp; User for SonarQube</h3>

<p>Now, We need to create a system user and group for SonarQube service.</p>

<p><strong>Create a group named ‚Äúsonar‚Äù</strong></p>

<p>First create a system group which named with ‚Äúsonar‚Äù</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>groupadd sonar
</code></pre></div></div>

<p><strong>Create a user named ‚Äúsonar‚Äù and into ‚Äúsonar‚Äù group with directory access</strong></p>

<p>Then, Create an user and the add user into the group with directory permission to the /opt/ directory.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>useradd <span class="nt">-c</span> <span class="s2">"SonarQube - User"</span> <span class="nt">-d</span> /opt/sonarqube/ <span class="nt">-g</span> sonar sonar
</code></pre></div></div>

<p>Provide user &amp; group directory ownership to ‚Äú/opt/sonarqube/‚Äù<em>**</em></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo chown </span>sonar:sonar /opt/sonarqube/ <span class="nt">-R</span>
</code></pre></div></div>

<h3 id="step-05-configure-sonarqube">STEP 05: Configure SonarQube</h3>

<p>Now, Let‚Äôs head-over to ‚Äú<strong>sonar.properties</strong>‚Äù configuration file and do the following changes</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vim /opt/sonarqube/conf/sonar.properties
</code></pre></div></div>

<p><strong>UnComment and type PostgreSQL database username and password that we‚Äôve created at privous step.</strong></p>

<p>Now, We need to point our PostgreSQL database to SonarQube service.
We are using ‚Äúlocalhost‚Äù as db host since we‚Äôve installed postgreSQl on same server.</p>

<p>Un-comment these lines and modify them as necessary.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sonar.jdbc.username<span class="o">=</span>sonar
sonar.jdbc.password<span class="o">=</span>p@ssw0rd
sonar.jdbc.url<span class="o">=</span>jdbc:postgresql://localhost/sonarqube
sonar.search.javaOpts<span class="o">=</span><span class="nt">-Xmx512m</span> <span class="nt">-Xms512m</span> <span class="nt">-XX</span>:+HeapDumpOnOutOfMemoryError
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">########### OPTIONAL USE ONLY #############</span>
sonar.jdbc.username<span class="o">=</span>sonar
sonar.jdbc.password<span class="o">=</span>sonar
sonar.jdbc.url<span class="o">=</span>jdbc:postgresql://localhost/sonarqube
sonar.web.host<span class="o">=</span>127.0.0.1
sonar.web.port<span class="o">=</span>9000
sonar.web.javaAdditionalOpts<span class="o">=</span><span class="nt">-server</span>
sonar.search.javaOpts<span class="o">=</span><span class="nt">-Xmx512m</span> <span class="nt">-Xms512m</span> <span class="nt">-XX</span>:+HeapDumpOnOutOfMemoryError
sonar.log.level<span class="o">=</span>INFO
sonar.path.logs<span class="o">=</span>logs
<span class="c">###########################################</span>
</code></pre></div></div>

<h3 id="step-06-configure-systemd-service-for-sonarqube">STEP 06: Configure Systemd Service For SonarQube</h3>

<p>Now, Create a startup script for SonarQube service that start at system boots</p>

<p>Create a systemd service file for SonarQube to be run at system startup.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim /etc/systemd/system/sonarqube.service
</code></pre></div></div>

<p>Add these content into the ‚Äúsonarqube.service‚Äù file.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Unit]
<span class="nv">Description</span><span class="o">=</span>SonarQube service
<span class="nv">After</span><span class="o">=</span>syslog.target network.target

<span class="o">[</span>Service]
<span class="nv">Type</span><span class="o">=</span>forking

<span class="nv">ExecStart</span><span class="o">=</span>/opt/sonarqube/bin/linux-x86-64/sonar.sh start
<span class="nv">ExecStop</span><span class="o">=</span>/opt/sonarqube/bin/linux-x86-64/sonar.sh stop

<span class="nv">User</span><span class="o">=</span>sonar
<span class="nv">Group</span><span class="o">=</span>sonar
<span class="nv">Restart</span><span class="o">=</span>always

<span class="nv">LimitNOFILE</span><span class="o">=</span>65536
<span class="nv">LimitNPROC</span><span class="o">=</span>4096


<span class="o">[</span>Install]
<span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</code></pre></div></div>

<p><strong>Enable &amp; Start SonarQube Service</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl daemon-reload 
systemctl <span class="nb">enable </span>sonarqube.service
systemctl start sonarqube.service
systemctl status <span class="nt">-l</span> sonarqube.service
</code></pre></div></div>

<p>After sometime later, Check whether the port are listening</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>netstat <span class="nt">-tulpena</span>  | <span class="nb">grep </span>9000
</code></pre></div></div>

<h3 id="step-07-configure-nginx-reverse-proxy-for-sonarqube">STEP 07: Configure NGINX Reverse Proxy For SonarQube</h3>

<p><strong>Install NGINX Package</strong></p>

<p>Now we need to expose our SonarQube server into outside as it is listening only on localhost. Therefore we are creating a Nginx reverse proxy to redirect outside traffic into the SonarQube.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get <span class="nb">install </span>nginx <span class="nt">-y</span>
</code></pre></div></div>

<p>Goto <strong>/etc/nginx/nginx.conf</strong> and un-comment these two lines</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim /etc/nginx/nginx.conf
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>include /etc/nginx/conf.d/<span class="k">*</span>.conf<span class="p">;</span>
include /etc/nginx/sites-enabled/<span class="k">*</span><span class="p">;</span>
</code></pre></div></div>

<p><strong>Create NGINX Configuration File For SonarQube</strong></p>

<p>Create a reverse proxy configuration file</p>

<p>sudo vim /etc/nginx/sites-enabled/sonarqube.conf</p>

<p>Copy and paste this vertual-host server block and change ‚Äúserver_name‚Äù entry as you required.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server<span class="o">{</span>
    listen      80<span class="p">;</span>
    server_name sonarqube.da.com<span class="p">;</span>

    access_log  /var/log/nginx/sonar.access.log<span class="p">;</span>
    error_log   /var/log/nginx/sonar.error.log<span class="p">;</span>

    proxy_buffers 16 64k<span class="p">;</span>
    proxy_buffer_size 128k<span class="p">;</span>

    location / <span class="o">{</span>
        proxy_pass  http://127.0.0.1:9000<span class="p">;</span>
        proxy_next_upstream error <span class="nb">timeout </span>invalid_header http_500 http_502 http_503 http_504<span class="p">;</span>
        proxy_redirect off<span class="p">;</span>

        proxy_set_header    Host            <span class="nv">$host</span><span class="p">;</span>
        proxy_set_header    X-Real-IP       <span class="nv">$remote_addr</span><span class="p">;</span>
        proxy_set_header    X-Forwarded-For <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
        proxy_set_header    X-Forwarded-Proto http<span class="p">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>Check ENGINX configurations</strong></p>

<p><code class="language-plaintext highlighter-rouge">nginx -t</code></p>

<p><strong>Enable &amp; Restart Nginx Service</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl <span class="nb">enable </span>nginx.service 
systemctl restart nginx.service
systemctl status <span class="nt">-l</span>  nginx.service
</code></pre></div></div>

<p><strong>Check whether port 80 listening for connections</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>netstat <span class="nt">-tulpena</span> | <span class="nb">grep </span>80
</code></pre></div></div>

<h3 id="step-08-firewall-configuration">STEP 08: Firewall Configuration</h3>

<p><strong>Allow TCP ports 9000, 9001, 80 through the firewall</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ufw allow 80,9000,9001/tcp

<span class="nb">sudo </span>ufw status
</code></pre></div></div>

<h3 id="step-09-access-sonarqube-through-web-browser">STEP 09: Access SonarQube Through Web Browser</h3>

<p>Now, SonarQube installation &amp; configuration has been completed. It‚Äôs time to access web console through the web browser.</p>

<p>Provide the default administrator account username and password as admin / admin</p>

<p><strong>Default Username: admin</strong></p>

<p><strong>Default Password: admin</strong></p>

<blockquote>
  <p>http://172.25.10.10/ OR http://YOUR-SERVER-IP</p>
</blockquote>

<p><img src="/images/pages/SonarQube-Ubuntu/1.png" width="100%" />
<img src="/images/pages/SonarQube-Ubuntu/2.png" width="100%" /></p>

<h5 id="torubleshooting-tips">Torubleshooting TIPS</h5>

<p>Sometime SonaqQube will not start as we expected. Most of the time the reason is related to elasticsearch service. SonarQube uses elasticsearch as it‚Äôs indexing engine. So, We may need to  troubleshoot elasticsearch as well.</p>

<p>Here are some troubleshooting tips:</p>

<p>SonarQube stores their service logs under ‚Äú/opt/sonarqube/logs‚Äù directory. You may need those log files in case of troubleshooting purpose.</p>

<p><strong>Troubleshooting Tips : Log Paths</strong></p>

<p><code class="language-plaintext highlighter-rouge">/opt/sonarqube/logs/es.log</code></p>

<p><code class="language-plaintext highlighter-rouge">/opt/sonarqube/logs/sonar.log</code></p>

<p><code class="language-plaintext highlighter-rouge">/opt/sonarqube/logs/web.log</code></p>

<p><strong>Troubleshooting Tips: JVM OPTION &amp; HEAP MEMORY ISSUES</strong></p>

<p>Additionally you may required to modify some entries related to  elasticsearch and JVM options, Therefore SonarQube using elastciseach and JVM options. The reason is our system‚Äôs HEAP MEMORY will not be compatible with the JVM configurations.</p>

<p>If your sonarqube service not starting or keep restarting, check following log file.</p>

<p>tail  -f /opt/sonarqube/logs/es.log</p>

<p>tail  -f /opt/sonarqube/logs/sonar.log</p>

<p>tail  -f /opt/sonarqube/logs/access.log</p>

<p>and check port number 9000 or 9001 listing on locahost.</p>

<p>If not, your JVM.OPTION may not compatible with you physical RAM amount.Then,  You need to define matching JAVA HEAP Memory size for  you host machine.</p>

<p><code class="language-plaintext highlighter-rouge">vim /opt/sonarqube/elasticsearch/config/jvm.options </code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Xms represents the initial size of total heap space</span>
<span class="c"># Xmx represents the maximum size of total heap space</span>

<span class="nt">-Xms1g</span>
<span class="nt">-Xmx1g</span>
</code></pre></div></div>

<p>You may need to adjust your HEAP MEMORY according to you physical usable memory size.</p>

<p><code class="language-plaintext highlighter-rouge">/opt/sonarqube/elasticsearch/config/elasticsearch.yml</code></p>

<p><code class="language-plaintext highlighter-rouge">/opt/sonarqube/elasticsearch/config/log4j2.properties</code></p>

<p><strong>SonarQube initial configuration has been completed. 
In the next tutorial, I will show you how to integrate and analyze your project code on SonarQube with Jenkins server and GitLab. And analysis of code deployments real-time.</strong></p>

<p>If you need further clarification, Please ask on YouTube video comment section.</p>

<p><img src="/images/pages/SonarQube-Ubuntu/3.png" width="100%" />
<img src="/images/pages/SonarQube-Ubuntu/4.png" width="100%" />
<img src="/images/pages/SonarQube-Ubuntu/5.png" width="100%" />
<img src="/images/pages/SonarQube-Ubuntu/6.png" width="100%" /></p>
:ET